# =============================================================================
# TIBIA TRACKER - DOCKER COMPOSE
# =============================================================================
# Configuração para deploy em produção com PostgreSQL, Redis e monitoramento

services:
  # ===========================================================================
  # BANCO DE DADOS - POSTGRESQL
  # ===========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: tibia-tracker-postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tibia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================================================
  # CACHE - REDIS
  # ===========================================================================
  redis:
    image: redis:7-alpine
    container_name: tibia-tracker-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - tibia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================================================
  # BACKEND API - FASTAPI
  # ===========================================================================
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: tibia-tracker-backend
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - USER_AGENT=${USER_AGENT}
      - SCRAPE_DELAY_SECONDS=${SCRAPE_DELAY_SECONDS}
      - SCRAPE_TIMEOUT_SECONDS=${SCRAPE_TIMEOUT_SECONDS}
      - TALEON_SAN_URL=${TALEON_SAN_URL}
      - TALEON_AURA_URL=${TALEON_AURA_URL}
      - TALEON_GAIA_URL=${TALEON_GAIA_URL}
    # Removido ports - acesso apenas interno via Docker network
    volumes:
      - ./Backend:/app
      - backend_logs:/var/log/tibia-tracker
      - outfits_data:/app/outfits
    networks:
      - tibia-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================================================
  # FRONTEND - REACT
  # ===========================================================================
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
        - REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT}
    container_name: tibia-tracker-frontend
    ports:
      - "80:80"  # Porta padrão HTTP
    volumes:
      - ./Frontend:/app
      - /app/node_modules
    networks:
      - tibia-network
    depends_on:
      - backend
    restart: unless-stopped

  # ===========================================================================
  # MONITORAMENTO - PROMETHEUS
  # ===========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: tibia-tracker-prometheus
    # Removido ports - acesso apenas interno
    volumes:
      - ./Scripts/Deploy/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tibia-network
    restart: unless-stopped

  # ===========================================================================
  # MONITORAMENTO - NODE EXPORTER
  # ===========================================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: tibia-tracker-node-exporter
    # Removido ports - acesso apenas interno
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - tibia-network
    restart: unless-stopped

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
  redis_data:
  backend_logs:
  outfits_data:
  prometheus_data:

# =============================================================================
# REDES
# =============================================================================
networks:
  tibia-network:
    driver: bridge 