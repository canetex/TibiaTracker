#!/bin/bash

# =============================================================================
# TIBIA TRACKER - RESTAURA√á√ÉO EM NOVO SERVIDOR
# =============================================================================
# Script para restaurar backup em servidor Debian novo

set -e  # Parar em caso de erro

echo "üöÄ Iniciando restaura√ß√£o em novo servidor..."

# =============================================================================
# VERIFICA√á√ïES INICIAIS
# =============================================================================

echo "üîç Verifica√ß√µes iniciais..."

# Verificar se √© root ou tem sudo
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Este script deve ser executado como root ou com sudo"
    exit 1
fi

# Verificar se arquivo de backup foi fornecido
if [ $# -eq 0 ]; then
    echo "‚ùå Uso: $0 <arquivo-backup.zip>"
    echo "   Exemplo: $0 tibia-tracker-backup-20241221_143022.zip"
    exit 1
fi

BACKUP_ZIP="$1"

if [ ! -f "$BACKUP_ZIP" ]; then
    echo "‚ùå Arquivo de backup n√£o encontrado: $BACKUP_ZIP"
    exit 1
fi

echo "‚úÖ Arquivo de backup encontrado: $BACKUP_ZIP"

# =============================================================================
# INSTALA√á√ÉO DE DEPEND√äNCIAS
# =============================================================================

echo "üì¶ Instalando depend√™ncias do sistema..."

# Atualizar sistema
apt-get update

# Instalar depend√™ncias necess√°rias
apt-get install -y \
    curl \
    wget \
    git \
    unzip \
    ufw \
    htop \
    nano \
    vim \
    tree \
    zip \
    unzip \
    ca-certificates \
    gnupg \
    lsb-release

# =============================================================================
# INSTALA√á√ÉO DO DOCKER
# =============================================================================

echo "üê≥ Instalando Docker..."

# Adicionar reposit√≥rio oficial do Docker
curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

# Instalar Docker
apt-get update
apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# Adicionar usu√°rio atual ao grupo docker
usermod -aG docker $SUDO_USER

# Iniciar e habilitar Docker
systemctl start docker
systemctl enable docker

echo "‚úÖ Docker instalado"

# =============================================================================
# INSTALA√á√ÉO DO DOCKER COMPOSE
# =============================================================================

echo "üìã Instalando Docker Compose..."

# Instalar Docker Compose standalone
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# Criar link simb√≥lico
ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose

echo "‚úÖ Docker Compose instalado"

# =============================================================================
# CONFIGURA√á√ÉO DO PROJETO
# =============================================================================

echo "üìÅ Configurando projeto..."

# Criar diret√≥rio do projeto
PROJECT_DIR="/opt/tibia-tracker"
mkdir -p "$PROJECT_DIR"
cd "$PROJECT_DIR"

# Extrair backup
echo "üì¶ Extraindo backup..."
unzip "$BACKUP_ZIP"

# Verificar se arquivos foram extra√≠dos
if [ ! -f "database.sql" ]; then
    echo "‚ùå Arquivo database.sql n√£o encontrado no backup!"
    exit 1
fi

if [ ! -f "env.backup" ]; then
    echo "‚ùå Arquivo env.backup n√£o encontrado no backup!"
    exit 1
fi

echo "‚úÖ Backup extra√≠do com sucesso"

# =============================================================================
# CONFIGURA√á√ÉO DO BANCO DE DADOS
# =============================================================================

echo "üóÑÔ∏è  Configurando banco de dados..."

# Instalar PostgreSQL
apt-get install -y postgresql postgresql-contrib

# Iniciar PostgreSQL
systemctl start postgresql
systemctl enable postgresql

# Carregar vari√°veis do backup
source env.backup

# Criar usu√°rio e banco
echo "üë§ Criando usu√°rio e banco de dados..."
sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';" || echo "‚ö†Ô∏è  Usu√°rio j√° existe"
sudo -u postgres psql -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;" || echo "‚ö†Ô∏è  Banco j√° existe"
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"

# Restaurar backup
echo "üîÑ Restaurando backup do banco..."
sudo -u postgres psql -d "$DB_NAME" < database.sql

echo "‚úÖ Banco de dados configurado"

# =============================================================================
# CONFIGURA√á√ÉO DO PROJETO
# =============================================================================

echo "‚öôÔ∏è  Configurando projeto..."

# Clonar reposit√≥rio
echo "üì• Clonando reposit√≥rio..."
git clone https://github.com/canetex/TibiaTracker.git temp-repo
cp -r temp-repo/* .
rm -rf temp-repo

# Configurar arquivo .env
echo "üîß Configurando vari√°veis de ambiente..."
cp env.backup .env

# Ajustar configura√ß√µes para produ√ß√£o
sed -i 's/ENVIRONMENT=development/ENVIRONMENT=production/' .env
sed -i 's/DEBUG=true/DEBUG=false/' .env

# Configurar permiss√µes
chown -R $SUDO_USER:$SUDO_USER "$PROJECT_DIR"
chmod 600 .env

echo "‚úÖ Projeto configurado"

# =============================================================================
# CONFIGURA√á√ÉO DE FIREWALL
# =============================================================================

echo "üî• Configurando firewall..."

# Configurar UFW
ufw --force reset
ufw allow 22/tcp
ufw allow 80/tcp
ufw allow 443/tcp
ufw default deny incoming
ufw default allow outgoing
ufw --force enable

echo "‚úÖ Firewall configurado"

# =============================================================================
# CONFIGURA√á√ÉO DE LOGS
# =============================================================================

echo "üìã Configurando logs..."

# Criar diret√≥rios de log
mkdir -p /var/log/tibia-tracker
chown -R $SUDO_USER:$SUDO_USER /var/log/tibia-tracker

# Configurar rota√ß√£o de logs
cat > /etc/logrotate.d/tibia-tracker << EOF
/var/log/tibia-tracker/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 $SUDO_USER $SUDO_USER
}
EOF

echo "‚úÖ Logs configurados"

# =============================================================================
# CONFIGURA√á√ÉO DE MONITORAMENTO
# =============================================================================

echo "üìä Configurando monitoramento..."

# Instalar ferramentas de monitoramento
apt-get install -y \
    htop \
    iotop \
    nethogs \
    nload \
    iftop

echo "‚úÖ Monitoramento configurado"

# =============================================================================
# INICIAR CONTAINERS
# =============================================================================

echo "üê≥ Iniciando containers..."

# Fazer build e iniciar containers
docker-compose up -d --build

# Aguardar containers ficarem saud√°veis
echo "‚è≥ Aguardando containers ficarem saud√°veis..."
sleep 30

# Verificar status
docker-compose ps

echo "‚úÖ Containers iniciados"

# =============================================================================
# VERIFICA√á√ïES FINAIS
# =============================================================================

echo "üîç Verifica√ß√µes finais..."

# Verificar se API est√° respondendo
if curl -f http://localhost:8000/health > /dev/null 2>&1; then
    echo "‚úÖ API est√° respondendo"
else
    echo "‚ùå API n√£o est√° respondendo"
fi

# Verificar se frontend est√° respondendo
if curl -f http://localhost:3000 > /dev/null 2>&1; then
    echo "‚úÖ Frontend est√° respondendo"
else
    echo "‚ùå Frontend n√£o est√° respondendo"
fi

# Verificar se Caddy est√° respondendo
if curl -f http://localhost:80 > /dev/null 2>&1; then
    echo "‚úÖ Caddy est√° respondendo"
else
    echo "‚ùå Caddy n√£o est√° respondendo"
fi

# =============================================================================
# CONFIGURA√á√ÉO DE SERVI√áOS DO SISTEMA
# =============================================================================

echo "üîß Configurando servi√ßos do sistema..."

# Criar script de reinicializa√ß√£o autom√°tica
cat > /usr/local/bin/tibia-tracker-restart << EOF
#!/bin/bash
cd $PROJECT_DIR
docker-compose restart
EOF

chmod +x /usr/local/bin/tibia-tracker-restart

# Configurar reinicializa√ß√£o autom√°tica dos containers
cat > /etc/systemd/system/tibia-tracker.service << EOF
[Unit]
Description=Tibia Tracker Docker Compose
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$PROJECT_DIR
ExecStart=/usr/bin/docker-compose up -d
ExecStop=/usr/bin/docker-compose down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF

systemctl enable tibia-tracker.service

echo "‚úÖ Servi√ßos configurados"

# =============================================================================
# CONFIGURA√á√ÉO DE BACKUP AUTOM√ÅTICO
# =============================================================================

echo "üíæ Configurando backup autom√°tico..."

# Criar script de backup autom√°tico
cat > /usr/local/bin/tibia-tracker-backup << 'EOF'
#!/bin/bash
cd /opt/tibia-tracker
./Scripts/Manuten√ß√£o/full-backup-production.sh
EOF

chmod +x /usr/local/bin/tibia-tracker-backup

# Configurar cron para backup di√°rio
(crontab -l 2>/dev/null; echo "0 2 * * * /usr/local/bin/tibia-tracker-backup") | crontab -

echo "‚úÖ Backup autom√°tico configurado"

# =============================================================================
# RESUMO FINAL
# =============================================================================

echo ""
echo "üéâ RESTAURA√á√ÉO CONCLU√çDA!"
echo "========================"
echo ""
echo "üìã RESUMO:"
echo "‚úÖ Sistema Debian configurado"
echo "‚úÖ Docker e Docker Compose instalados"
echo "‚úÖ PostgreSQL configurado e restaurado"
echo "‚úÖ Projeto Tibia Tracker configurado"
echo "‚úÖ Containers iniciados e funcionando"
echo "‚úÖ Firewall configurado"
echo "‚úÖ Logs configurados"
echo "‚úÖ Monitoramento configurado"
echo "‚úÖ Backup autom√°tico configurado"
echo ""
echo "üåê URLs de acesso:"
echo "   Frontend: http://$(hostname -I | awk '{print $1}'):3000"
echo "   Caddy: http://$(hostname -I | awk '{print $1}'):80"
echo "   API: http://$(hostname -I | awk '{print $1}'):8000"
echo ""
echo "üîß COMANDOS √öTEIS:"
echo "   # Ver status dos containers"
echo "   cd $PROJECT_DIR && docker-compose ps"
echo ""
echo "   # Ver logs"
echo "   cd $PROJECT_DIR && docker-compose logs -f"
echo ""
echo "   # Reiniciar servi√ßos"
echo "   tibia-tracker-restart"
echo ""
echo "   # Fazer backup manual"
echo "   tibia-tracker-backup"
echo ""
echo "   # Acessar banco de dados"
echo "   sudo -u postgres psql -d $DB_NAME"
echo ""
echo "üîí SEGURAN√áA:"
echo "   ‚Ä¢ Firewall UFW ativo"
echo "   ‚Ä¢ Containers isolados"
echo "   ‚Ä¢ Logs de auditoria ativos"
echo "   ‚Ä¢ Backup autom√°tico configurado"
echo ""
echo "üìù PR√ìXIMOS PASSOS:"
echo "   1. Configurar dom√≠nio e SSL (se necess√°rio)"
echo "   2. Configurar monitoramento externo"
echo "   3. Testar todas as funcionalidades"
echo "   4. Configurar alertas"
echo "   5. Documentar configura√ß√µes"
echo ""
echo "üö® IMPORTANTE:"
echo "   ‚Ä¢ Altere as senhas padr√£o"
echo "   ‚Ä¢ Configure backup externo"
echo "   ‚Ä¢ Monitore os logs regularmente"
echo "   ‚Ä¢ Mantenha o sistema atualizado"
echo "" 