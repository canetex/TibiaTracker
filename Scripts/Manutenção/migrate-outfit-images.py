#!/usr/bin/env python3
"""
Script de Migra√ß√£o de Imagens de Outfit
=======================================

Este script:
1. Faz backup do banco atual
2. Lista todas as URLs de outfit_image_url
3. Faz download das imagens
4. Atualiza o banco com os caminhos locais
5. Relaciona os arquivos baixados aos registros

Uso:
    python Scripts/Manuten√ß√£o/migrate-outfit-images.py
"""

import os
import sys
import subprocess
import logging
from pathlib import Path
from datetime import datetime
import time

# Adicionar o diret√≥rio do backend ao path
backend_path = Path(__file__).parent.parent.parent / "Backend"
sys.path.insert(0, str(backend_path))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('migration_outfit_images.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def run_backup_script():
    """Executar script de backup"""
    logger.info("üîÑ Executando backup do banco de dados...")
    
    try:
        # Executar script de backup
        backup_script = Path(__file__).parent / "backup-database.sh"
        result = subprocess.run(
            [str(backup_script)],
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent.parent.parent
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ Backup realizado com sucesso")
            return True
        else:
            logger.error(f"‚ùå Erro no backup: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar backup: {e}")
        return False

def check_database_connection():
    """Verificar conex√£o com o banco"""
    try:
        from app.db.database import get_db
        from app.models.character import Character
        
        db = next(get_db())
        # Testar conex√£o
        count = db.query(Character).count()
        logger.info(f"‚úÖ Conex√£o com banco OK. Total de personagens: {count}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro de conex√£o com banco: {e}")
        return False

def migrate_database_schema():
    """Migrar schema do banco para adicionar outfit_image_path"""
    logger.info("üîÑ Migrando schema do banco...")
    
    try:
        from app.db.database import engine
        from app.models.character import Base
        
        # Criar tabelas (isso adicionar√° as novas colunas se n√£o existirem)
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ Schema migrado com sucesso")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na migra√ß√£o do schema: {e}")
        return False

def download_and_migrate_images():
    """Download das imagens e migra√ß√£o dos dados"""
    logger.info("üîÑ Iniciando download e migra√ß√£o das imagens...")
    
    try:
        from app.db.database import get_db
        from app.models.character import Character, CharacterSnapshot
        from app.services.outfit_manager import outfit_manager
        
        db = next(get_db())
        
        # 1. Fazer download de todas as imagens
        logger.info("üì• Fazendo download das imagens...")
        download_stats = outfit_manager.download_all_outfits(db)
        
        logger.info(f"üìä Estat√≠sticas do download:")
        logger.info(f"   - Total de URLs: {download_stats['total_urls']}")
        logger.info(f"   - Baixadas: {download_stats['downloaded']}")
        logger.info(f"   - J√° existiam: {download_stats['already_exists']}")
        logger.info(f"   - Falharam: {download_stats['failed']}")
        
        if download_stats['errors']:
            logger.warning("‚ö†Ô∏è Erros durante download:")
            for error in download_stats['errors'][:5]:  # Mostrar apenas os primeiros 5
                logger.warning(f"   - {error}")
        
        # 2. Atualizar registros de characters
        logger.info("üîÑ Atualizando registros de characters...")
        characters_updated = 0
        
        characters = db.query(Character).filter(
            Character.outfit_image_url.isnot(None)
        ).all()
        
        for character in characters:
            if character.outfit_image_url:
                local_path = outfit_manager.get_image_path(character.outfit_image_url)
                
                if local_path:
                    # Verificar se o arquivo existe
                    full_path = outfit_manager.base_path / local_path
                    if full_path.exists():
                        character.outfit_image_path = local_path
                        characters_updated += 1
                        logger.debug(f"Updated character {character.name}: {local_path}")
        
        # 3. Atualizar registros de snapshots
        logger.info("üîÑ Atualizando registros de snapshots...")
        snapshots_updated = 0
        
        snapshots = db.query(CharacterSnapshot).filter(
            CharacterSnapshot.outfit_image_url.isnot(None)
        ).all()
        
        for snapshot in snapshots:
            if snapshot.outfit_image_url:
                local_path = outfit_manager.get_image_path(snapshot.outfit_image_url)
                
                if local_path:
                    # Verificar se o arquivo existe
                    full_path = outfit_manager.base_path / local_path
                    if full_path.exists():
                        snapshot.outfit_image_path = local_path
                        snapshots_updated += 1
                        logger.debug(f"Updated snapshot {snapshot.id}: {local_path}")
        
        # 4. Commit das mudan√ßas
        db.commit()
        
        logger.info(f"‚úÖ Migra√ß√£o conclu√≠da:")
        logger.info(f"   - Characters atualizados: {characters_updated}")
        logger.info(f"   - Snapshots atualizados: {snapshots_updated}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na migra√ß√£o: {e}")
        return False

def verify_migration():
    """Verificar se a migra√ß√£o foi bem-sucedida"""
    logger.info("üîç Verificando migra√ß√£o...")
    
    try:
        from app.db.database import get_db
        from app.models.character import Character, CharacterSnapshot
        from app.services.outfit_manager import outfit_manager
        
        db = next(get_db())
        
        # Verificar characters com outfit_image_path
        characters_with_path = db.query(Character).filter(
            Character.outfit_image_path.isnot(None)
        ).count()
        
        snapshots_with_path = db.query(CharacterSnapshot).filter(
            CharacterSnapshot.outfit_image_path.isnot(None)
        ).count()
        
        # Verificar arquivos f√≠sicos
        storage_stats = outfit_manager.get_storage_stats()
        
        logger.info(f"üìä Resultado da verifica√ß√£o:")
        logger.info(f"   - Characters com path local: {characters_with_path}")
        logger.info(f"   - Snapshots com path local: {snapshots_with_path}")
        logger.info(f"   - Arquivos f√≠sicos: {storage_stats.get('total_files', 0)}")
        logger.info(f"   - Tamanho total: {storage_stats.get('total_size_mb', 0)} MB")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    logger.info("üöÄ Iniciando migra√ß√£o de imagens de outfit...")
    logger.info(f"‚è∞ Timestamp: {datetime.now()}")
    
    # Verificar se estamos no diret√≥rio correto
    if not Path("docker-compose.yml").exists():
        logger.error("‚ùå Execute este script no diret√≥rio raiz do projeto")
        return False
    
    # 1. Backup do banco
    if not run_backup_script():
        logger.error("‚ùå Falha no backup. Abortando migra√ß√£o.")
        return False
    
    # 2. Verificar conex√£o
    if not check_database_connection():
        logger.error("‚ùå Falha na conex√£o com banco. Abortando migra√ß√£o.")
        return False
    
    # 3. Migrar schema
    if not migrate_database_schema():
        logger.error("‚ùå Falha na migra√ß√£o do schema. Abortando migra√ß√£o.")
        return False
    
    # 4. Download e migra√ß√£o
    if not download_and_migrate_images():
        logger.error("‚ùå Falha no download/migra√ß√£o. Abortando.")
        return False
    
    # 5. Verificar resultado
    if not verify_migration():
        logger.error("‚ùå Falha na verifica√ß√£o. Verifique os logs.")
        return False
    
    logger.info("üéâ Migra√ß√£o conclu√≠da com sucesso!")
    logger.info("üìÅ As imagens est√£o salvas em: /app/outfits/images/")
    logger.info("üíæ Backup salvo em: ./backups/")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 