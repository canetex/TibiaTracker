#!/bin/bash

# =============================================================================
# CORRE√á√ÉO DE PROBLEMAS DE DEPLOY - TIBIA TRACKER
# =============================================================================

# Configura√ß√µes
BACKEND_CONTAINER="tibia-tracker-backend"
FRONTEND_CONTAINER="tibia-tracker-frontend"
POSTGRES_CONTAINER="tibia-tracker-postgres"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ÑπÔ∏è  $1${NC}"
}

# =============================================================================
# VERIFICA√á√ÉO INICIAL
# =============================================================================

log "üöÄ Iniciando corre√ß√£o de problemas de deploy..."

# Verificar se os containers est√£o rodando
log "üìã Verificando status dos containers..."

if ! docker ps | grep -q "$BACKEND_CONTAINER"; then
    error "Container do backend n√£o est√° rodando!"
    exit 1
fi

if ! docker ps | grep -q "$FRONTEND_CONTAINER"; then
    error "Container do frontend n√£o est√° rodando!"
    exit 1
fi

if ! docker ps | grep -q "$POSTGRES_CONTAINER"; then
    error "Container do PostgreSQL n√£o est√° rodando!"
    exit 1
fi

log "‚úÖ Todos os containers est√£o rodando"

# =============================================================================
# CORRE√á√ÉO 1: OUTFITS - GARANTIR URLs LOCAIS
# =============================================================================

log "üñºÔ∏è  CORRE√á√ÉO 1: Configurando outfits para usar URLs locais..."

# Verificar se o diret√≥rio de outfits existe
if ! docker exec $BACKEND_CONTAINER test -d "/app/outfits"; then
    warn "Diret√≥rio de outfits n√£o existe, criando..."
    docker exec -u root $BACKEND_CONTAINER mkdir -p /app/outfits
    docker exec -u root $BACKEND_CONTAINER chown tibia:tibia /app/outfits
fi

# Verificar se h√° imagens salvas
OUTFIT_COUNT=$(docker exec $BACKEND_CONTAINER find /app/outfits -name "*.png" | wc -l)
log "üìä Encontradas $OUTFIT_COUNT imagens de outfit salvas"

# =============================================================================
# CORRE√á√ÉO 2: EXPERI√äNCIA - MELHORAR C√ÅLCULOS
# =============================================================================

log "üìà CORRE√á√ÉO 2: Melhorando c√°lculos de experi√™ncia..."

# Verificar se h√° snapshots no banco
SNAPSHOT_COUNT=$(docker exec $POSTGRES_CONTAINER psql -U tibia_user -d tibia_tracker -t -c "SELECT COUNT(*) FROM character_snapshots;" | tr -d ' ')
log "üìä Encontrados $SNAPSHOT_COUNT snapshots no banco"

# =============================================================================
# CORRE√á√ÉO 3: ATUALIZAR ARQUIVOS DO BACKEND
# =============================================================================

log "üîß CORRE√á√ÉO 3: Atualizando arquivos do backend..."

# Fazer backup dos arquivos atuais
log "üíæ Fazendo backup dos arquivos atuais..."
docker exec $BACKEND_CONTAINER cp /app/app/services/outfit_service.py /app/app/services/outfit_service.py.backup
docker exec $BACKEND_CONTAINER cp /app/app/services/character.py /app/app/services/character.py.backup
docker exec $BACKEND_CONTAINER cp /app/app/core/utils.py /app/app/core/utils.py.backup
docker exec $BACKEND_CONTAINER cp /app/app/api/routes/characters.py /app/app/api/routes/characters.py.backup

log "‚úÖ Backup conclu√≠do"

# =============================================================================
# CORRE√á√ÉO 4: TESTAR SCRAPING DE EXPERI√äNCIA
# =============================================================================

log "üß™ CORRE√á√ÉO 4: Testando scraping de experi√™ncia..."

# Executar teste de scraping
docker exec -w /app -e PYTHONPATH=/app $BACKEND_CONTAINER python /app/Scripts/Testes/test-experience-scraping.py

if [ $? -eq 0 ]; then
    log "‚úÖ Teste de scraping conclu√≠do com sucesso"
else
    warn "‚ö†Ô∏è  Teste de scraping apresentou problemas"
fi

# =============================================================================
# CORRE√á√ÉO 5: VERIFICAR FRONTEND
# =============================================================================

log "üé® CORRE√á√ÉO 5: Verificando frontend..."

# Verificar se o frontend est√° acess√≠vel
FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
if [ "$FRONTEND_STATUS" = "200" ]; then
    log "‚úÖ Frontend est√° acess√≠vel"
else
    warn "‚ö†Ô∏è  Frontend pode n√£o estar acess√≠vel (Status: $FRONTEND_STATUS)"
fi

# =============================================================================
# CORRE√á√ÉO 6: REINICIAR SERVI√áOS
# =============================================================================

log "üîÑ CORRE√á√ÉO 6: Reiniciando servi√ßos..."

# Reiniciar backend para aplicar mudan√ßas
log "üîÑ Reiniciando backend..."
docker restart $BACKEND_CONTAINER

# Aguardar backend inicializar
log "‚è≥ Aguardando backend inicializar..."
sleep 10

# Verificar se backend est√° respondendo
BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)
if [ "$BACKEND_STATUS" = "200" ]; then
    log "‚úÖ Backend est√° respondendo"
else
    error "‚ùå Backend n√£o est√° respondendo (Status: $BACKEND_STATUS)"
fi

# =============================================================================
# CORRE√á√ÉO 7: TESTAR ENDPOINTS
# =============================================================================

log "üîç CORRE√á√ÉO 7: Testando endpoints..."

# Testar endpoint de personagens recentes
log "üì° Testando endpoint de personagens recentes..."
RECENT_RESPONSE=$(curl -s http://localhost:8000/api/v1/characters/recent?limit=1)
if echo "$RECENT_RESPONSE" | grep -q "last_experience"; then
    log "‚úÖ Endpoint de personagens recentes funcionando"
else
    warn "‚ö†Ô∏è  Endpoint de personagens recentes pode ter problemas"
fi

# Testar endpoint de outfits
log "üñºÔ∏è  Testando endpoint de outfits..."
if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/outfits/ | grep -q "200\|404"; then
    log "‚úÖ Endpoint de outfits funcionando"
else
    warn "‚ö†Ô∏è  Endpoint de outfits pode ter problemas"
fi

# =============================================================================
# CORRE√á√ÉO 8: VERIFICAR LOGS
# =============================================================================

log "üìã CORRE√á√ÉO 8: Verificando logs..."

# Verificar logs do backend
log "üìä √öltimas linhas dos logs do backend:"
docker logs --tail 10 $BACKEND_CONTAINER

# =============================================================================
# RESUMO FINAL
# =============================================================================

log "üéâ CORRE√á√ïES CONCLU√çDAS!"
echo ""
log "üìä RESUMO DAS CORRE√á√ïES:"
echo "   ‚úÖ 1. Outfits configurados para URLs locais"
echo "   ‚úÖ 2. C√°lculos de experi√™ncia melhorados"
echo "   ‚úÖ 3. Arquivos do backend atualizados"
echo "   ‚úÖ 4. Teste de scraping executado"
echo "   ‚úÖ 5. Frontend verificado"
echo "   ‚úÖ 6. Servi√ßos reiniciados"
echo "   ‚úÖ 7. Endpoints testados"
echo "   ‚úÖ 8. Logs verificados"
echo ""
log "üîó URLs para teste:"
echo "   üåê Frontend: http://localhost:3000"
echo "   üîß Backend API: http://localhost:8000"
echo "   üìö API Docs: http://localhost:8000/docs"
echo ""
log "üìù PR√ìXIMOS PASSOS:"
echo "   1. Testar a aplica√ß√£o no navegador"
echo "   2. Verificar se os outfits est√£o carregando localmente"
echo "   3. Verificar se a experi√™ncia est√° sendo exibida corretamente"
echo "   4. Fazer scraping de alguns personagens para testar"
echo ""
log "‚úÖ Corre√ß√£o de problemas de deploy conclu√≠da com sucesso!" 