#!/bin/bash

# Script para ativar todos os personagens inativos
# Isso far√° com que todos os personagens sejam inclu√≠dos nas atualiza√ß√µes autom√°ticas

echo "üîÑ Ativando todos os personagens inativos..."
echo "=================================================="

# Verificar se o backend est√° funcionando
echo "üì° Verificando status do backend..."
if ! curl -s "http://localhost:8000/health" > /dev/null; then
    echo "‚ùå Backend n√£o est√° respondendo!"
    exit 1
fi

echo "‚úÖ Backend est√° funcionando"

# Obter estat√≠sticas atuais
echo "üìä Obtendo estat√≠sticas atuais..."
TOTAL_CHARS=$(curl -s "http://localhost:8000/api/v1/characters?page=1&size=1" | jq -r '.total')
ACTIVE_CHARS=$(curl -s "http://localhost:8000/api/v1/characters?page=1&size=1000" | jq -r '.characters[] | select(.is_active == true) | .id' | wc -l)
INACTIVE_CHARS=$((TOTAL_CHARS - ACTIVE_CHARS))

echo "üìà Estat√≠sticas atuais:"
echo "   üìã Total de personagens: $TOTAL_CHARS"
echo "   ‚úÖ Ativos: $ACTIVE_CHARS"
echo "   ‚ùå Inativos: $INACTIVE_CHARS"

if [ $INACTIVE_CHARS -eq 0 ]; then
    echo "‚úÖ Todos os personagens j√° est√£o ativos!"
    exit 0
fi

# Confirmar antes de prosseguir
echo ""
echo "‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° ativar TODOS os $INACTIVE_CHARS personagens inativos!"
echo "   - Isso far√° com que todos sejam inclu√≠dos nas atualiza√ß√µes autom√°ticas"
echo "   - O pr√≥ximo update autom√°tico ser√° mais demorado"
echo "   - Considere se realmente precisa de todos os personagens ativos"
echo ""
read -p "ü§î Continuar? (s/N): " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[Ss]$ ]]; then
    echo "‚ùå Opera√ß√£o cancelada pelo usu√°rio"
    exit 0
fi

# Executar comando SQL para ativar todos os personagens
echo "üöÄ Ativando todos os personagens..."
echo "=================================================="

# Usar docker exec para executar comando SQL
ACTIVATED_COUNT=$(docker exec -w /app tibia-tracker-backend psql -h $DB_HOST -U $DB_USER -d $DB_NAME -t -c "UPDATE characters SET is_active = true WHERE is_active = false; SELECT ROW_COUNT();" 2>/dev/null | tr -d ' ')

if [ $? -eq 0 ] && [ ! -z "$ACTIVATED_COUNT" ]; then
    echo "‚úÖ Sucesso! $ACTIVATED_COUNT personagens foram ativados"
    
    # Verificar resultado
    echo ""
    echo "üìä Verificando resultado..."
    NEW_ACTIVE_CHARS=$(curl -s "http://localhost:8000/api/v1/characters?page=1&size=1000" | jq -r '.characters[] | select(.is_active == true) | .id' | wc -l)
    
    echo "üìà Novas estat√≠sticas:"
    echo "   üìã Total de personagens: $TOTAL_CHARS"
    echo "   ‚úÖ Ativos: $NEW_ACTIVE_CHARS"
    echo "   ‚ùå Inativos: $((TOTAL_CHARS - NEW_ACTIVE_CHARS))"
    
    echo ""
    echo "üéâ Todos os personagens est√£o agora ativos!"
    echo "‚ö†Ô∏è  Pr√≥ximo update autom√°tico incluir√° todos os $NEW_ACTIVE_CHARS personagens"
    
else
    echo "‚ùå Erro ao ativar personagens"
    echo "üí° Tentando m√©todo alternativo..."
    
    # M√©todo alternativo usando API
    echo "üîÑ Usando m√©todo alternativo via API..."
    
    # Obter lista de personagens inativos
    INACTIVE_IDS=$(curl -s "http://localhost:8000/api/v1/characters?page=1&size=1000" | jq -r '.characters[] | select(.is_active == false) | .id')
    
    if [ -z "$INACTIVE_IDS" ]; then
        echo "‚úÖ Nenhum personagem inativo encontrado!"
        exit 0
    fi
    
    ACTIVATED_COUNT=0
    TOTAL_INACTIVE=$(echo "$INACTIVE_IDS" | wc -l)
    
    for char_id in $INACTIVE_IDS; do
        # Ativar personagem via API
        RESPONSE=$(curl -s -X PUT "http://localhost:8000/api/v1/characters/$char_id" \
            -H "Content-Type: application/json" \
            -d '{"is_active": true}')
        
        if echo "$RESPONSE" | jq -e '.is_active' > /dev/null; then
            ACTIVATED_COUNT=$((ACTIVATED_COUNT + 1))
            echo "   ‚úÖ ID $char_id ativado"
        else
            echo "   ‚ùå ID $char_id - Erro na ativa√ß√£o"
        fi
    done
    
    echo ""
    echo "üìä Resultado: $ACTIVATED_COUNT de $TOTAL_INACTIVE personagens ativados"
fi

echo ""
echo "‚úÖ Script conclu√≠do!" 