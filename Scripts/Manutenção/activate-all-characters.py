#!/usr/bin/env python3
"""
Script para ativar todos os personagens inativos
"""

import asyncio
import sys
import os
from sqlalchemy import text
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

# Adicionar o diret√≥rio do projeto ao path
sys.path.append('/app')

from app.core.config import settings
from app.db.database import get_db_session

async def activate_all_characters():
    """Ativar todos os personagens inativos"""
    
    print("üîÑ Ativando todos os personagens inativos...")
    print("=" * 50)
    
    try:
        # Criar conex√£o com o banco
        engine = create_async_engine(settings.DATABASE_URL)
        
        async with engine.begin() as conn:
            # Verificar estat√≠sticas atuais
            result = await conn.execute(text("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(CASE WHEN is_active = true THEN 1 END) as ativos,
                    COUNT(CASE WHEN is_active = false THEN 1 END) as inativos
                FROM characters
            """))
            
            stats = result.fetchone()
            total, ativos, inativos = stats
            
            print(f"üìä Estat√≠sticas atuais:")
            print(f"   üìã Total de personagens: {total}")
            print(f"   ‚úÖ Ativos: {ativos}")
            print(f"   ‚ùå Inativos: {inativos}")
            
            if inativos == 0:
                print("‚úÖ Todos os personagens j√° est√£o ativos!")
                return
            
            # Confirmar antes de prosseguir
            print("")
            print(f"‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° ativar TODOS os {inativos} personagens inativos!")
            print("   - Isso far√° com que todos sejam inclu√≠dos nas atualiza√ß√µes autom√°ticas")
            print("   - O pr√≥ximo update autom√°tico ser√° mais demorado")
            print("")
            
            confirm = input("ü§î Continuar? (s/N): ").strip().lower()
            if confirm != 's':
                print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
                return
            
            # Ativar todos os personagens inativos
            print("üöÄ Ativando todos os personagens...")
            print("=" * 50)
            
            result = await conn.execute(text("""
                UPDATE characters 
                SET is_active = true, updated_at = CURRENT_TIMESTAMP
                WHERE is_active = false
            """))
            
            activated_count = result.rowcount
            
            print(f"‚úÖ Sucesso! {activated_count} personagens foram ativados")
            
            # Verificar resultado
            print("")
            print("üìä Verificando resultado...")
            
            result = await conn.execute(text("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(CASE WHEN is_active = true THEN 1 END) as ativos,
                    COUNT(CASE WHEN is_active = false THEN 1 END) as inativos
                FROM characters
            """))
            
            stats = result.fetchone()
            total, ativos, inativos = stats
            
            print(f"üìà Novas estat√≠sticas:")
            print(f"   üìã Total de personagens: {total}")
            print(f"   ‚úÖ Ativos: {ativos}")
            print(f"   ‚ùå Inativos: {inativos}")
            
            print("")
            print("üéâ Todos os personagens est√£o agora ativos!")
            print(f"‚ö†Ô∏è  Pr√≥ximo update autom√°tico incluir√° todos os {ativos} personagens")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False
    
    finally:
        await engine.dispose()
    
    return True

if __name__ == "__main__":
    asyncio.run(activate_all_characters()) 